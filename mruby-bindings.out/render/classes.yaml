--- !ruby/object:MRuby::Bindings::RenderedText
id: DiskStat
body: "/**\n * Ruby Class: DiskStat \n * Wraps: disk_stat\n */\n\n#ifndef mruby_Procps_free_DiskStat_ptr\n#define
  mruby_Procps_free_DiskStat_ptr(obj) free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_disk_stat(mrb_state*
  mrb, void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_DiskStat_ptr(native_ref->obj);\n    native_ref->obj = NULL;\n
  \ }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type disk_stat_data_type =
  {\n   \"disk_stat\", mruby_Procps_free_disk_stat\n};\n\nvoid mruby_Procps_DiskStat_init(mrb_state*
  mrb)\n{\n  struct RClass* DiskStat_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"DiskStat\"))) {\n    DiskStat_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"DiskStat\", mrb->object_class);\n  } else {\n    DiskStat_class
  = mrb_class_get_under(mrb, Procps_module(mrb), \"DiskStat\");\n  }\n  MRB_SET_INSTANCE_TT(DiskStat_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, DiskStat_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_DiskStat(mrb_state* mrb, mrb_value obj)\n{\n  if (mrb_obj_is_kind_of(mrb,
  obj, Procps_DiskStat_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb, obj, Procps_VoidPointer_class(mrb)))
  {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmrb_value\nmruby_Procps_box_disk_stat(mrb_state*
  mrb, disk_stat *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_DiskStat_class(mrb), &disk_stat_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_disk_stat(mrb_state* mrb, disk_stat
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_DiskStat_class(mrb), &disk_stat_data_type,
  box));\n}\n\nvoid\nmruby_Procps_set_disk_stat_data_ptr(mrb_value obj, disk_stat
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &disk_stat_data_type);\n}\n\nvoid\nmruby_Procps_gift_disk_stat_data_ptr(mrb_value
  obj, disk_stat *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &disk_stat_data_type);\n}\n\ndisk_stat *\nmruby_Procps_unbox_disk_stat(mrb_value
  boxed)\n{\n  return (disk_stat *)mruby_Procps_unbox(boxed);\n}\n"
--- !ruby/object:MRuby::Bindings::RenderedText
id: PROCTAB
body: "/**\n * Ruby Class: PROCTAB \n * Wraps: PROCTAB\n */\n\n#ifndef mruby_Procps_free_PROCTAB_ptr\n#define
  mruby_Procps_free_PROCTAB_ptr(obj) free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_PROCTAB(mrb_state*
  mrb, void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_PROCTAB_ptr(native_ref->obj);\n    native_ref->obj = NULL;\n
  \ }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type PROCTAB_data_type = {\n
  \  \"PROCTAB\", mruby_Procps_free_PROCTAB\n};\n\nvoid mruby_Procps_PROCTAB_init(mrb_state*
  mrb)\n{\n  struct RClass* PROCTAB_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"PROCTAB\"))) {\n    PROCTAB_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"PROCTAB\", mrb->object_class);\n  } else {\n    PROCTAB_class
  = mrb_class_get_under(mrb, Procps_module(mrb), \"PROCTAB\");\n  }\n  MRB_SET_INSTANCE_TT(PROCTAB_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, PROCTAB_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_PROCTAB(mrb_state* mrb, mrb_value obj)\n{\n  if (mrb_obj_is_kind_of(mrb,
  obj, Procps_PROCTAB_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb, obj, Procps_VoidPointer_class(mrb)))
  {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmrb_value\nmruby_Procps_box_PROCTAB(mrb_state*
  mrb, PROCTAB *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_PROCTAB_class(mrb), &PROCTAB_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_PROCTAB(mrb_state* mrb, PROCTAB *unboxed)\n{\n
  \ mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n  return
  mrb_obj_value(Data_Wrap_Struct(mrb, Procps_PROCTAB_class(mrb), &PROCTAB_data_type,
  box));\n}\n\nvoid\nmruby_Procps_set_PROCTAB_data_ptr(mrb_value obj, PROCTAB *unboxed)\n{\n
  \ mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n  mrb_data_init(obj,
  box, &PROCTAB_data_type);\n}\n\nvoid\nmruby_Procps_gift_PROCTAB_data_ptr(mrb_value
  obj, PROCTAB *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &PROCTAB_data_type);\n}\n\nPROCTAB *\nmruby_Procps_unbox_PROCTAB(mrb_value
  boxed)\n{\n  return (PROCTAB *)mruby_Procps_unbox(boxed);\n}\n"
--- !ruby/object:MRuby::Bindings::RenderedText
id: PartitionStat
body: "/**\n * Ruby Class: PartitionStat \n * Wraps: partition_stat\n */\n\n#ifndef
  mruby_Procps_free_PartitionStat_ptr\n#define mruby_Procps_free_PartitionStat_ptr(obj)
  free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_partition_stat(mrb_state* mrb,
  void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_PartitionStat_ptr(native_ref->obj);\n    native_ref->obj
  = NULL;\n  }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type partition_stat_data_type
  = {\n   \"partition_stat\", mruby_Procps_free_partition_stat\n};\n\nvoid mruby_Procps_PartitionStat_init(mrb_state*
  mrb)\n{\n  struct RClass* PartitionStat_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"PartitionStat\"))) {\n    PartitionStat_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"PartitionStat\", mrb->object_class);\n  } else {\n    PartitionStat_class
  = mrb_class_get_under(mrb, Procps_module(mrb), \"PartitionStat\");\n  }\n  MRB_SET_INSTANCE_TT(PartitionStat_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, PartitionStat_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_PartitionStat(mrb_state* mrb, mrb_value obj)\n{\n  if
  (mrb_obj_is_kind_of(mrb, obj, Procps_PartitionStat_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb,
  obj, Procps_VoidPointer_class(mrb))) {\n    return 1;\n  } else {\n    return 0;\n
  \ }\n}\n\nmrb_value\nmruby_Procps_box_partition_stat(mrb_state* mrb, partition_stat
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_PartitionStat_class(mrb), &partition_stat_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_partition_stat(mrb_state* mrb, partition_stat
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_PartitionStat_class(mrb), &partition_stat_data_type,
  box));\n}\n\nvoid\nmruby_Procps_set_partition_stat_data_ptr(mrb_value obj, partition_stat
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &partition_stat_data_type);\n}\n\nvoid\nmruby_Procps_gift_partition_stat_data_ptr(mrb_value
  obj, partition_stat *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &partition_stat_data_type);\n}\n\npartition_stat *\nmruby_Procps_unbox_partition_stat(mrb_value
  boxed)\n{\n  return (partition_stat *)mruby_Procps_unbox(boxed);\n}\n"
--- !ruby/object:MRuby::Bindings::RenderedText
id: Proc
body: "/**\n * Ruby Class: Proc \n * Wraps: proc_t\n */\n\n#ifndef mruby_Procps_free_Proc_ptr\n#define
  mruby_Procps_free_Proc_ptr(obj) free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_proc_t(mrb_state*
  mrb, void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_Proc_ptr(native_ref->obj);\n    native_ref->obj = NULL;\n
  \ }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type proc_t_data_type = {\n
  \  \"proc_t\", mruby_Procps_free_proc_t\n};\n\nvoid mruby_Procps_Proc_init(mrb_state*
  mrb)\n{\n  struct RClass* Proc_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"Proc\"))) {\n    Proc_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"Proc\", mrb->object_class);\n  } else {\n    Proc_class =
  mrb_class_get_under(mrb, Procps_module(mrb), \"Proc\");\n  }\n  MRB_SET_INSTANCE_TT(Proc_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, Proc_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_Proc(mrb_state* mrb, mrb_value obj)\n{\n  if (mrb_obj_is_kind_of(mrb,
  obj, Procps_Proc_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb, obj, Procps_VoidPointer_class(mrb)))
  {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmrb_value\nmruby_Procps_box_proc_t(mrb_state*
  mrb, proc_t *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_Proc_class(mrb), &proc_t_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_proc_t(mrb_state* mrb, proc_t *unboxed)\n{\n
  \ mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n  return
  mrb_obj_value(Data_Wrap_Struct(mrb, Procps_Proc_class(mrb), &proc_t_data_type, box));\n}\n\nvoid\nmruby_Procps_set_proc_t_data_ptr(mrb_value
  obj, proc_t *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &proc_t_data_type);\n}\n\nvoid\nmruby_Procps_gift_proc_t_data_ptr(mrb_value
  obj, proc_t *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &proc_t_data_type);\n}\n\nproc_t *\nmruby_Procps_unbox_proc_t(mrb_value
  boxed)\n{\n  return (proc_t *)mruby_Procps_unbox(boxed);\n}\n"
--- !ruby/object:MRuby::Bindings::RenderedText
id: ProcData
body: "/**\n * Ruby Class: ProcData \n * Wraps: proc_data_t\n */\n\n#ifndef mruby_Procps_free_ProcData_ptr\n#define
  mruby_Procps_free_ProcData_ptr(obj) free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_proc_data_t(mrb_state*
  mrb, void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_ProcData_ptr(native_ref->obj);\n    native_ref->obj = NULL;\n
  \ }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type proc_data_t_data_type
  = {\n   \"proc_data_t\", mruby_Procps_free_proc_data_t\n};\n\nvoid mruby_Procps_ProcData_init(mrb_state*
  mrb)\n{\n  struct RClass* ProcData_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"ProcData\"))) {\n    ProcData_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"ProcData\", mrb->object_class);\n  } else {\n    ProcData_class
  = mrb_class_get_under(mrb, Procps_module(mrb), \"ProcData\");\n  }\n  MRB_SET_INSTANCE_TT(ProcData_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, ProcData_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_ProcData(mrb_state* mrb, mrb_value obj)\n{\n  if (mrb_obj_is_kind_of(mrb,
  obj, Procps_ProcData_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb, obj, Procps_VoidPointer_class(mrb)))
  {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmrb_value\nmruby_Procps_box_proc_data_t(mrb_state*
  mrb, proc_data_t *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_ProcData_class(mrb), &proc_data_t_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_proc_data_t(mrb_state* mrb, proc_data_t
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_ProcData_class(mrb), &proc_data_t_data_type,
  box));\n}\n\nvoid\nmruby_Procps_set_proc_data_t_data_ptr(mrb_value obj, proc_data_t
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &proc_data_t_data_type);\n}\n\nvoid\nmruby_Procps_gift_proc_data_t_data_ptr(mrb_value
  obj, proc_data_t *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &proc_data_t_data_type);\n}\n\nproc_data_t *\nmruby_Procps_unbox_proc_data_t(mrb_value
  boxed)\n{\n  return (proc_data_t *)mruby_Procps_unbox(boxed);\n}\n"
--- !ruby/object:MRuby::Bindings::RenderedText
id: SlabCache
body: "/**\n * Ruby Class: SlabCache \n * Wraps: slab_cache\n */\n\n#ifndef mruby_Procps_free_SlabCache_ptr\n#define
  mruby_Procps_free_SlabCache_ptr(obj) free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_slab_cache(mrb_state*
  mrb, void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_SlabCache_ptr(native_ref->obj);\n    native_ref->obj =
  NULL;\n  }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type slab_cache_data_type
  = {\n   \"slab_cache\", mruby_Procps_free_slab_cache\n};\n\nvoid mruby_Procps_SlabCache_init(mrb_state*
  mrb)\n{\n  struct RClass* SlabCache_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"SlabCache\"))) {\n    SlabCache_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"SlabCache\", mrb->object_class);\n  } else {\n    SlabCache_class
  = mrb_class_get_under(mrb, Procps_module(mrb), \"SlabCache\");\n  }\n  MRB_SET_INSTANCE_TT(SlabCache_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, SlabCache_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_SlabCache(mrb_state* mrb, mrb_value obj)\n{\n  if (mrb_obj_is_kind_of(mrb,
  obj, Procps_SlabCache_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb, obj, Procps_VoidPointer_class(mrb)))
  {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmrb_value\nmruby_Procps_box_slab_cache(mrb_state*
  mrb, slab_cache *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_SlabCache_class(mrb), &slab_cache_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_slab_cache(mrb_state* mrb, slab_cache
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_SlabCache_class(mrb), &slab_cache_data_type,
  box));\n}\n\nvoid\nmruby_Procps_set_slab_cache_data_ptr(mrb_value obj, slab_cache
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &slab_cache_data_type);\n}\n\nvoid\nmruby_Procps_gift_slab_cache_data_ptr(mrb_value
  obj, slab_cache *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &slab_cache_data_type);\n}\n\nslab_cache *\nmruby_Procps_unbox_slab_cache(mrb_value
  boxed)\n{\n  return (slab_cache *)mruby_Procps_unbox(boxed);\n}\n"
--- !ruby/object:MRuby::Bindings::RenderedText
id: SlabInfo
body: "/**\n * Ruby Class: SlabInfo \n * Wraps: struct slab_info\n */\n\n#ifndef mruby_Procps_free_SlabInfo_ptr\n#define
  mruby_Procps_free_SlabInfo_ptr(obj) free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_slab_info(mrb_state*
  mrb, void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_SlabInfo_ptr(native_ref->obj);\n    native_ref->obj = NULL;\n
  \ }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type slab_info_data_type =
  {\n   \"struct slab_info\", mruby_Procps_free_slab_info\n};\n\nvoid mruby_Procps_SlabInfo_init(mrb_state*
  mrb)\n{\n  struct RClass* SlabInfo_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"SlabInfo\"))) {\n    SlabInfo_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"SlabInfo\", mrb->object_class);\n  } else {\n    SlabInfo_class
  = mrb_class_get_under(mrb, Procps_module(mrb), \"SlabInfo\");\n  }\n  MRB_SET_INSTANCE_TT(SlabInfo_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, SlabInfo_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_SlabInfo(mrb_state* mrb, mrb_value obj)\n{\n  if (mrb_obj_is_kind_of(mrb,
  obj, Procps_SlabInfo_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb, obj, Procps_VoidPointer_class(mrb)))
  {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmrb_value\nmruby_Procps_box_slab_info(mrb_state*
  mrb, struct slab_info *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_SlabInfo_class(mrb), &slab_info_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_slab_info(mrb_state* mrb, struct slab_info
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_SlabInfo_class(mrb), &slab_info_data_type,
  box));\n}\n\nvoid\nmruby_Procps_set_slab_info_data_ptr(mrb_value obj, struct slab_info
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &slab_info_data_type);\n}\n\nvoid\nmruby_Procps_gift_slab_info_data_ptr(mrb_value
  obj, struct slab_info *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &slab_info_data_type);\n}\n\nstruct slab_info *\nmruby_Procps_unbox_slab_info(mrb_value
  boxed)\n{\n  return (struct slab_info *)mruby_Procps_unbox(boxed);\n}\n"
--- !ruby/object:MRuby::Bindings::RenderedText
id: SlabStat
body: "/**\n * Ruby Class: SlabStat \n * Wraps: struct slab_stat\n */\n\n#ifndef mruby_Procps_free_SlabStat_ptr\n#define
  mruby_Procps_free_SlabStat_ptr(obj) free(obj)\n#endif\n\nstatic void\nmruby_Procps_free_slab_stat(mrb_state*
  mrb, void* ptr)\n{\n  mruby_to_native_ref * native_ref = (mruby_to_native_ref*)ptr;\n
  \ if (native_ref\n      && mruby_Procps_owns(mrb, native_ref)\n      && native_ref->obj)
  {\n    mruby_Procps_free_SlabStat_ptr(native_ref->obj);\n    native_ref->obj = NULL;\n
  \ }\n  free(native_ref);\n}\n\nstatic const\nmrb_data_type slab_stat_data_type =
  {\n   \"struct slab_stat\", mruby_Procps_free_slab_stat\n};\n\nvoid mruby_Procps_SlabStat_init(mrb_state*
  mrb)\n{\n  struct RClass* SlabStat_class;\n  if (!mrb_const_defined(mrb, mrb_obj_value(Procps_module(mrb)),
  mrb_intern_cstr(mrb, \"SlabStat\"))) {\n    SlabStat_class = mrb_define_class_under(mrb,
  Procps_module(mrb), \"SlabStat\", mrb->object_class);\n  } else {\n    SlabStat_class
  = mrb_class_get_under(mrb, Procps_module(mrb), \"SlabStat\");\n  }\n  MRB_SET_INSTANCE_TT(SlabStat_class,
  MRB_TT_DATA);\n  mrb_include_module(mrb, SlabStat_class, Procps_Pointer_module(mrb));\n}\n\nunsigned
  char\nmruby_Procps_typecheck_SlabStat(mrb_state* mrb, mrb_value obj)\n{\n  if (mrb_obj_is_kind_of(mrb,
  obj, Procps_SlabStat_class(mrb)) ||\n      mrb_obj_is_kind_of(mrb, obj, Procps_VoidPointer_class(mrb)))
  {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nmrb_value\nmruby_Procps_box_slab_stat(mrb_state*
  mrb, struct slab_stat *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_SlabStat_class(mrb), &slab_stat_data_type,
  box));\n}\n\nmrb_value\nmruby_Procps_giftwrap_slab_stat(mrb_state* mrb, struct slab_stat
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ return mrb_obj_value(Data_Wrap_Struct(mrb, Procps_SlabStat_class(mrb), &slab_stat_data_type,
  box));\n}\n\nvoid\nmruby_Procps_set_slab_stat_data_ptr(mrb_value obj, struct slab_stat
  *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_unmanaged_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &slab_stat_data_type);\n}\n\nvoid\nmruby_Procps_gift_slab_stat_data_ptr(mrb_value
  obj, struct slab_stat *unboxed)\n{\n  mruby_to_native_ref* box = mruby_Procps_managed_ref_create(unboxed);\n
  \ mrb_data_init(obj, box, &slab_stat_data_type);\n}\n\nstruct slab_stat *\nmruby_Procps_unbox_slab_stat(mrb_value
  boxed)\n{\n  return (struct slab_stat *)mruby_Procps_unbox(boxed);\n}\n"
